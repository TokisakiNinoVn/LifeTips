package com.example.ui.controller;

import javafx.animation.Interpolator;
import javafx.animation.TranslateTransition;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import org.json.JSONArray;
import org.json.JSONObject;
import com.example.ui.service.PostService;
import com.example.ui.constant.constant;
import javafx.util.Duration;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class DetailsController {
    @FXML
    private Label usernameLabel;
    @FXML
    private VBox imagePane;
    @FXML
    private ImageView imageView;
    @FXML
    private Button btnPrev;
    @FXML
    private Button btnNext;
    @FXML
    private VBox rightPanel;
    @FXML
    private Label likesLabel;
    @FXML
    private Label commentsCountLabel;
    @FXML
    private Button saveButton;
    @FXML
    private Button shareButton;
    @FXML
    private VBox commentList;
    @FXML
    private ComboBox<String> ratingComboBox;
    @FXML
    private TextArea commentTextArea;
    @FXML
    private Button submitCommentButton;
    @FXML
    private Button showPopupButton;
    @FXML
    private StackPane popupOverlay;
    @FXML
    private VBox detailedTips;

    private int postId;
    private List<String> imageUrls = new ArrayList<>();
    private int currentImageIndex = 0;

    // Danh s√°ch ƒë√°nh gi√° value - key // MƒÉc ƒë·ªãnh l√† 5 Sao
    private JSONObject ratingValues = new JSONObject()
            .put("1 Sao", 1)
            .put("2 Sao", 2)
            .put("3 Sao", 3)
            .put("4 Sao", 4)
            .put("5 Sao", 5);

    // h√†m x·ª≠ l√Ω format l·∫°i c√°i link ·∫£nh
    private String formatImageUrl(String url) {
        String cleanedUrl = url.replace("\\", "/").replaceFirst("^/?public/?", "");
        return constant.FILE_URL + "/" + cleanedUrl;
    }

    // Nh·∫≠n postId t·ª´ HomeController
    public void setPostId(int postId) {
        this.postId = postId;
        loadPostDetails();
    }

    @FXML
    private void initialize() {
        btnPrev.setOnAction(event -> showPreviousImage());
        btnNext.setOnAction(event -> showNextImage());
        submitCommentButton.setOnAction(event -> submitComment());
        saveButton.setOnAction(event -> savePost());
        shareButton.setOnAction(event -> sharePost());

        ObservableList<String> ratings = FXCollections.observableArrayList(
                new ArrayList<>(ratingValues.keySet()));
        ratingComboBox.setItems(ratings);
        ratingComboBox.setValue("5 Sao");
    }

    // T·∫£i chi ti·∫øt b√†i vi·∫øt
    private void loadPostDetails() {
        try {
            JSONObject response = PostService.getPostById(postId);
            JSONObject post = response.getJSONObject("data");

            usernameLabel.setText("By " + post.getJSONObject("user").getString("full_name"));
            likesLabel.setText("‚ô• " + post.getInt("total_like"));
            commentsCountLabel.setText("üí¨ " + post.getJSONArray("comments").length());
            updatePopupContent(post);
            loadImages(post.getJSONArray("filesNormal"));
            loadComments(post.getJSONArray("comments"));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // C·∫≠p nh·∫≠t n·ªôi dung c·ªßa popup v·ªõi th√¥ng tin chi ti·∫øt b√†i vi·∫øt
    @FXML
    private void updatePopupContent(JSONObject post) {
        for (var node : detailedTips.getChildren()) {
            if (node instanceof Label && ((Label) node).getText().startsWith("üìò")) {
                ((Label) node).setText("üìò " + post.getString("title"));
            } else if (node instanceof Text) {
                String categoryInfo = "";
                if (post.has("inforCategoryOfPost") && !post.isNull("inforCategoryOfPost")) {
                    categoryInfo = "\n\nDanh m·ª•c: " + post.getJSONObject("inforCategoryOfPost").getString("name");
                }
                ((Text) node).setText(post.getString("content") + categoryInfo);
            }
        }
    }

    // T·∫£i danh s√°ch h√¨nh ·∫£nh
    private void loadImages(JSONArray files) {
        imageUrls.clear();
        for (int i = 0; i < files.length(); i++) {
            String url = files.getJSONObject(i).getString("url");
            url = formatImageUrl(url);
            imageUrls.add(url);
        }

        if (!imageUrls.isEmpty()) {
            imageView.setImage(new Image(imageUrls.get(0)));
            currentImageIndex = 0;
        } else {
            imageView.setImage(null);
        }

        // V√¥ hi·ªáu h√≥a n√∫t ƒëi·ªÅu h∆∞·ªõng n·∫øu kh√¥ng c·∫ßn
        btnPrev.setDisable(imageUrls.size() <= 1);
        btnNext.setDisable(imageUrls.size() <= 1);
    }

    // Hi·ªÉn th·ªã h√¨nh ·∫£nh tr∆∞·ªõc ƒë√≥
    private void showPreviousImage() {
        if (imageUrls.size() > 1) {
            currentImageIndex = (currentImageIndex - 1 + imageUrls.size()) % imageUrls.size();
            imageView.setImage(new Image(imageUrls.get(currentImageIndex)));
        }
    }

    // Hi·ªÉn th·ªã h√¨nh ·∫£nh ti·∫øp theo
    private void showNextImage() {
        if (imageUrls.size() > 1) {
            currentImageIndex = (currentImageIndex + 1) % imageUrls.size();
            imageView.setImage(new Image(imageUrls.get(currentImageIndex)));
        }
    }

    // X·ª≠ l√Ω g·ª≠i b√¨nh lu·∫≠n
    private void submitComment() {
        String comment = commentTextArea.getText().trim();
        String selectedRating = ratingComboBox.getValue();
        int ratingValue = ratingValues.getInt(selectedRating);

        if (!comment.isEmpty() && ratingValue > 0) {
            try {
                JSONObject body = new JSONObject();
                body.put("content", comment);
                body.put("rate", ratingValue);

                // G·ªçi API ƒë·ªÉ g·ª≠i b√¨nh lu·∫≠n
                JSONObject response = PostService.createComment(postId, body);
                if (response.getString("status").equals("Success")) {
                    loadPostDetails();
                    commentTextArea.clear();
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Th√†nh c√¥ng");
                    alert.setHeaderText("B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i");
                    alert.setContentText("C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i b√¨nh lu·∫≠n!");
                    alert.showAndWait();
                }
            } catch (Exception e) {
                e.printStackTrace();
                // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("L·ªói");
                alert.setHeaderText("Kh√¥ng th·ªÉ g·ª≠i b√¨nh lu·∫≠n");
                alert.setContentText("ƒê√£ x·∫£y ra l·ªói khi g·ª≠i b√¨nh lu·∫≠n. Vui l√≤ng th·ª≠ l·∫°i.");
                alert.showAndWait();
            }
        } else {
            // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu thi·∫øu th√¥ng tin
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Thi·∫øu th√¥ng tin");
            alert.setHeaderText("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin");
            alert.setContentText("B·∫°n c·∫ßn nh·∫≠p n·ªôi dung b√¨nh lu·∫≠n v√† ch·ªçn ƒë√°nh gi√°.");
            alert.showAndWait();
        }
    }

    private void loadComments(JSONArray comments) {
        commentList.getChildren().clear(); // X√≥a c√°c b√¨nh lu·∫≠n c≈©

        for (int i = 0; i < comments.length(); i++) {
            JSONObject comment = comments.getJSONObject(i);

            // T·∫°o container cho m·ªói b√¨nh lu·∫≠n
            VBox commentBox = new VBox(5);
            commentBox.setStyle("-fx-background-color: #f5f5f5; -fx-padding: 10; -fx-border-radius: 5;");

            // Th√¥ng tin ng∆∞·ªùi b√¨nh lu·∫≠n
            HBox userInfo = new HBox(10);
            ImageView avatarView = new ImageView();
            try {
                // Gi·∫£ s·ª≠ avatar l√† URL h√¨nh ·∫£nh
                avatarView.setImage(
                        new Image(constant.FILE_URL + "public\\avatars\\" + comment.getString("avatar") + ".png"));
            } catch (Exception e) {
                avatarView.setImage(new Image(Objects.requireNonNull(getClass().getResourceAsStream("/assets/images/img.png"))));
                System.out.println("Avatar not found, using default image." + e);
            }
            avatarView.setFitHeight(30);
            avatarView.setFitWidth(30);

            Label userName = new Label(comment.getString("full_name"));
            Label rating = new Label("‚≠ê".repeat(comment.getInt("rate")));
            userInfo.getChildren().addAll(avatarView, userName, rating);

            // N·ªôi dung b√¨nh lu·∫≠n
            Label content = new Label(comment.getString("content"));
            content.setStyle("-fx-font-size: 14px; -fx-wrap-text: true;");

            // Th·ªùi gian b√¨nh lu·∫≠n
            Label time = new Label(comment.getString("created_at"));
            time.setStyle("-fx-font-size: 12px; -fx-text-fill: #666;");

            commentBox.getChildren().addAll(userInfo, content, time);
            commentList.getChildren().add(commentBox);
        }
    }

    // X·ª≠ l√Ω l∆∞u b√†i vi·∫øt
    private void savePost() {
        try {
            JSONObject body = new JSONObject();
            body.put("postId", postId);

            // G·ªçi API ƒë·ªÉ l∆∞u b√†i vi·∫øt
            JSONObject response = PostService.savePost(body);
            if (response.getString("status").equals("success")) {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Th√†nh c√¥ng");
                alert.setHeaderText(null);
                alert.setContentText("B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
                alert.showAndWait();
            } else {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("L·ªói");
                alert.setHeaderText(null);
                alert.setContentText("Kh√¥ng th·ªÉ l∆∞u b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.");
                alert.showAndWait();
            }
        } catch (Exception e) {
            e.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("L·ªói");
            alert.setHeaderText(null);
            alert.setContentText("ƒê√£ x·∫£y ra l·ªói khi l∆∞u b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.");
            alert.showAndWait();
        }
    }

    @FXML
    private void showMoreTips() {
        popupOverlay.setVisible(true);

        // ƒê·∫∑t popup b√™n d∆∞·ªõi tr∆∞·ªõc khi animate
        detailedTips.setTranslateY(300);

        // T·∫°o hi·ªáu ·ª©ng tr∆∞·ª£t l√™n
        TranslateTransition slideIn = new TranslateTransition(Duration.millis(400), detailedTips);
        slideIn.setFromY(300); // t·ª´ d∆∞·ªõi l√™n
        slideIn.setToY(0); // v·ªÅ v·ªã tr√≠ b√¨nh th∆∞·ªùng
        slideIn.setInterpolator(Interpolator.EASE_OUT);
        slideIn.play();
    }

    @FXML
    private void hideTips() {
        TranslateTransition slideOut = new TranslateTransition(Duration.millis(300), detailedTips);
        slideOut.setFromY(0);
        slideOut.setToY(300);
        slideOut.setInterpolator(Interpolator.EASE_IN);
        slideOut.setOnFinished(event -> popupOverlay.setVisible(false));
        slideOut.play();
    }

    // H√†m x·ª≠ l√Ω khi nh·∫•n shareButton - copy link b√†i vi·∫øt v√†o clipboard
    @FXML
    private void sharePost() {
        String postUrl = constant.BASE_URL + "/public/post/" + postId; // Gi·∫£ s·ª≠ ƒë√¢y l√† URL b√†i vi·∫øt
        java.awt.datatransfer.StringSelection stringSelection = new java.awt.datatransfer.StringSelection(postUrl);
        java.awt.Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringSelection, null);

        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Chia s·∫ª th√†nh c√¥ng");
        alert.setHeaderText(null);
        alert.setContentText("ƒê√£ sao ch√©p li√™n k·∫øt b√†i vi·∫øt v√†o clipboard!");
        alert.showAndWait();
    }
}